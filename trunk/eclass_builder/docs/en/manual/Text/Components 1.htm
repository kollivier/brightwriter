<html><head><base href="about:blank"></head><body><b>EClass Components</b><br>

<br>
<b>Package: </b>conman <br>

<b>Major Classes:</b> ConMan, ConNode, ContentList,  ImportLinks, ImportFiles, many helper functions<br>

<b>Location: </b>&lt;EClass Source Directory&gt;/conman<br>

<b>Description: </b>EClass.Builder is at its core a content management
program, and it is no mistake that the core classes for manipulating an
EClass.Builder project are stored in a Python module called "conman".
(Well, maybe that name was a mistake, but I didn't really want to type
contentmanager to import it!) Use conman to create and edit projects,
assign properties (metadata) to pages, and edit the structure of an
EClass. It also contains a number of modules (like HTMLFunctions.py,
HTMLTemplates.py and validate.py) which contain helper functions used
by conman and plugins alike. Basically, anything that would be used
system-wide should be stored here.<br>

<br>
<b>Data Storage: </b>conman stores its data in the IMS Standard
"content packaging" XML format. Conman's data is stored in the
"imsmanifest.xml" file in the root directory of the EClass project.
This file does not, however, store the actual content of the Page in
the XML file - simply the metadata and organization of content are
stored here. (These instead are saved separately in sub-folders of the
EClass project directory.) Separating the structure from the content
simplifies and speeds up loading, and more importantly allows
EClass.Builder to define customized handling for different data types.<br>

<br>
<b>Package:</b> plugins<br>

<b>Major Modules: </b>EClassPage, HTML, Quiz<br>

<b>Location:  &lt;</b>EClass Source Directory&gt;/plugins<br>

<b>Description:</b> This package is where plugins are stored and loaded
from. Plugins are dynamically loaded, so you simply need to drop the
plugin in this folder and restart to activate it.See the Plugin API section for how you can add plugins to EClass.Builder. <br>

<br>

<b>Package: </b>themes<br>

<b>Major Modules: </b>Default_No_Frames, Default_Frames<br>

<b>Location:</b> &lt;EClass Source Directory&gt;/themes<br>

<b>Description:</b> Themes are another (new and) important part of
EClass building. Themes are basically simple HTML templates with macros
such as --[name]-- inserted. You use the theme's .py file to define
what to replace --[name]-- in the template with. It's a very simple
templating method, but by associating a .py file with each theme,
developers can extend a theme to support additional macros and advanced
functionality. Note that I plan on adding SimpleTAL template support in
the near future, and other formats could be supported by adding the
code for them in the plugins.BaseHTMLPublisher.ApplyTemplate routine.</body></html>